{"version":3,"sources":["components/ToDo/Task/Task.module.scss","store/ListsReducers.js","store/StoreProvider.js","views/Homepage/Homepage.module.scss","components/ToDo/ListForm/ListForm.module.scss","views/ToDo/ToDo.module.scss","components/ToDo/TaskForm/TaskForm.module.scss","components/Portal/Portal.module.scss","components/Header/Header.js","views/Homepage/Homepage.js","components/Portal/Portal.js","components/ToDo/Task/Task.js","components/ToDo/TaskForm/TaskForm.js","components/ToDo/TaskForm/Validation.js","components/ToDo/ListForm/ListForm.js","components/ToDo/ListForm/Validation.js","views/ToDo/ToDo.js","App.js","Root.js","index.js","components/Header/Header.module.scss","store/ListsActions.js"],"names":["module","exports","listsReducers","state","action","type","ADD_LIST","payload","EDIT_LIST","map","list","id","created","REMOVE_LIST","filter","StoreContext","createContext","StoreProvider","children","useState","name","user","setUser","useReducer","lists","dispatch","openedList","setOpenedList","createNewList","setCreateNewList","Provider","value","Header","useContext","className","styles","wrapper","logo","header","nav","item","to","link","activeClassName","linkIsActive","exact","Homepage","bar","motivation","Portal","ReactDOM","createPortal","modal","document","getElementById","Task","content","deleteTask","isDone","changeStatus","statusBtnClass","status","statusDone","htmlFor","checked","onChange","e","itemContainer","itemTxt","onClick","TaskForm","add","taskInput","setTaskInput","taskValidation","setTaskValidation","classNameInput","classNames","bind","cx","input","inputError","placeholder","target","preventDefault","length","taskValidationFn","newTask","uuidv4","button","ListForm","title","setTitle","tasks","setTasks","titleValidation","setTitleValidation","handleRemoveOneTask","taskId","task","handlechangeTaskStatus","useEffect","editedListIndex","forEach","index","findEditedList","renderTasks","classNameSaveButton","buttonSave","classNameCancelButton","buttonCancel","classNameDeletelButton","buttonDelete","onSubmit","titleValidationFn","editedList","editList","newList","addList","prev","buttonsContainer","removeList","ListWrapper","React","lazy","ToDo","contentDeactive","fallback","disabled","App","basename","process","path","component","render","Root","StrictMode","getCurrentDate","Date","toLocaleString","updated"],"mappings":"0FACAA,EAAOC,QAAU,CAAC,KAAO,mBAAmB,cAAgB,4BAA4B,QAAU,sBAAsB,OAAS,qBAAqB,WAAa,yBAAyB,WAAa,yBAAyB,IAAM,oB,2GCC3NC,EAAgB,SAACC,EAAOC,GAEjC,OAAQA,EAAOC,MACX,KAAKC,IACD,MAAM,GAAN,mBAAWH,GAAX,CAAkBC,EAAOG,UAC7B,KAAKC,IACD,OAAOL,EAAMM,KAAI,SAAAC,GACb,OAAIA,EAAKC,KAAOP,EAAOG,QAAQI,GAEpB,2BACAP,EAAOG,SADd,IAEIK,QAASF,EAAKE,UAIXF,KAEnB,KAAKG,IACD,OAAOV,EAAMW,QAAO,SAAAJ,GAAI,OAAIA,EAAKC,KAAOP,EAAOG,QAAQI,MAC3D,QACI,OAAOR,I,OClBNY,EAAeC,wBAAc,MAoC3BC,IAlCf,YAAsC,IAAbC,EAAY,EAAZA,SACrB,EAAwBC,mBAAS,CAC7BC,KAAM,KADV,mBAAOC,EAAP,KAAaC,EAAb,KAGA,EAA0BC,qBAAWrB,EAAe,IAApD,mBAAOsB,EAAP,KAAcC,EAAd,KAWA,EAAoCN,mBAAS,MAA7C,mBAAOO,EAAP,KAAmBC,EAAnB,KACA,EAA0CR,oBAAS,GAAnD,mBAAOS,EAAP,KAAsBC,EAAtB,KAEA,OACI,cAACd,EAAae,SAAd,CAAuBC,MAAO,CAC1BV,OACAC,UACAE,QACAC,WACAC,aACAC,gBACAC,gBACAC,oBARJ,SAUKX,M,mBClCblB,EAAOC,QAAU,CAAC,QAAU,0BAA0B,KAAO,uBAAuB,OAAS,yBAAyB,IAAM,sBAAsB,WAAa,6BAA6B,KAAO,yB,mBCAnMD,EAAOC,QAAU,CAAC,MAAQ,wBAAwB,WAAa,6BAA6B,OAAS,yBAAyB,WAAa,6BAA6B,aAAe,+BAA+B,aAAe,+BAA+B,QAAU,0BAA0B,iBAAmB,mCAAmC,IAAM,wB,mBCApWD,EAAOC,QAAU,CAAC,QAAU,sBAAsB,gBAAkB,8BAA8B,OAAS,qBAAqB,OAAS,uB,mBCAzID,EAAOC,QAAU,CAAC,QAAU,0BAA0B,MAAQ,wBAAwB,WAAa,6BAA6B,OAAS,2B,mBCAzID,EAAOC,QAAU,CAAC,MAAQ,sBAAsB,cAAgB,gC,4KC4CjD+B,MAxCf,WACI,IAAQX,EAASY,qBAAWlB,KAApBM,KACR,OACI,yBAAQa,UAAWC,IAAOC,QAA1B,UACI,oBAAIF,UAAWC,IAAOE,KAAtB,oBACA,sBAAKH,UAAWC,IAAOG,OAAvB,UACI,qBAAKJ,UAAWC,IAAOI,IAAvB,SACI,+BACI,oBAAIL,UAAWC,IAAOK,KAAtB,SACI,cAAC,IAAD,CACIC,GAAG,IACHP,UAAWC,IAAOO,KAClBC,gBAAiBR,IAAOS,aACxBC,OAAK,EAJT,wBAOJ,oBAAIX,UAAWC,IAAOK,KAAtB,SACI,cAAC,IAAD,CACIC,GAAG,QACHP,UAAWC,IAAOO,KAClBC,gBAAiBR,IAAOS,aACxBC,OAAK,EAJT,2BAiBZ,oBAAGX,UAAWC,IAAOd,KAArB,qBAAoCA,EAAKD,KAAzC,gB,iBCfD0B,MArBf,WACI,OACI,mCACI,0BAASZ,UAAWC,IAAOC,QAA3B,UACI,qBAAIF,UAAWC,IAAOG,OAAtB,wBAAyC,mBAAGJ,UAAWC,IAAOE,KAArB,wBACzC,8FAEI,uBAFJ,cAGiB,4BAAG,cAAC,IAAD,CAAMI,GAAG,QAAQP,UAAWC,IAAOO,KAAnC,sBAHpB,sDAKA,oBAAIR,UAAWC,IAAOY,MACtB,yBAASb,UAAWC,IAAOa,WAA3B,SACI,4G,gECALC,MATf,YAA+B,IAAb/B,EAAY,EAAZA,SACd,OAAOgC,IAASC,aACZ,qBAAKjB,UAAWC,IAAOiB,MAAvB,SACKlC,IAELmC,SAASC,eAAe,gB,iBC4BjBC,MArCf,YAAkE,IAAlDC,EAAiD,EAAjDA,QAAS7C,EAAwC,EAAxCA,GAAI8C,EAAoC,EAApCA,WAAYC,EAAwB,EAAxBA,OAAQC,EAAgB,EAAhBA,aAEvCC,EAAc,UACZF,EAAD,UAA6BvB,IAAO0B,OAApC,YAA8C1B,IAAO2B,YAA3C3B,IAAO0B,QAExB,OACI,0BAAS3B,UAAWC,IAAOK,KAA3B,UACI,uBAAOuB,QAAQ,SAAf,SACI,uBACIpD,GAAG,SACHN,KAAK,WACL2D,QAASN,EACTO,SAAU,SAACC,GAAD,OAAOP,EAAaO,EAAGvD,IACjCuB,UAAW0B,MASnB,sBAAK1B,UAAWC,IAAOgC,cAAvB,UACI,mBACIjC,UAAWC,IAAOiC,QADtB,SAEEZ,IACF,qBAAKtB,UAAWC,IAAOY,SAE3B,wBACI1C,KAAK,SACL6B,UAAWC,IAAOsB,WAClBY,QAAS,kBAAMZ,EAAW9C,U,0CCwB3B2D,MAnDf,YAA0C,IAAD,IAArBd,eAAqB,MAAX,GAAW,EAAPe,EAAO,EAAPA,IAC9B,EAAkCpD,mBAASqC,GAA3C,mBAAOgB,EAAP,KAAkBC,EAAlB,KACA,EAA4CtD,oBAAS,GAArD,mBAAOuD,EAAP,KAAuBC,EAAvB,KAuBIC,EADKC,IAAWC,KAAK3C,IACJ4C,CAAG,CACpBC,OAAO,EACPC,YAAaP,IAEjB,OACI,mCACI,0BAASxC,UAAWC,IAAOC,QAA3B,UACI,gCACI,uBACI8C,YAAaR,EAAiB,cCxCtB,0BDyCRrE,KAAK,OACL6B,UAAW0C,EACX7C,MAAOyC,EACPP,SAlCC,SAAAC,GACjBS,GAAkB,GAClBF,EAAaP,EAAEiB,OAAOpD,YAmCd,wBACIsC,QAjCM,SAAAH,GAElB,GADAA,EAAEkB,iBCfsB,SAAU5B,GACtC,OAAIA,EAAQ6B,OAAS,EDebC,CAAiBd,GAAY,CAC7B,IAAMe,EAAU,CACZ/B,QAASgB,EACT7D,GAAI6E,cACJ9B,QAAQ,GAEZa,EAAIgB,GACJd,EAAa,SAEbE,GAAkB,IAuBVzC,UAAWC,IAAOsD,OAFtB,4B,iBEiHDC,MArJf,YAAmC,IAAD,IAAd/E,UAAc,MAAT,KAAS,EAC9B,EAA6DsB,qBAAWlB,KAAhES,EAAR,EAAQA,MAAOC,EAAf,EAAeA,SAAUE,EAAzB,EAAyBA,cAAeE,EAAxC,EAAwCA,iBACxC,EAA0BV,mBAAS,IAAnC,mBAAOwE,EAAP,KAAcC,EAAd,KACA,EAA0BzE,mBAAS,IAAnC,mBAAO0E,EAAP,KAAcC,EAAd,KACA,EAA8C3E,oBAAS,GAAvD,mBAAO4E,EAAP,KAAwBC,EAAxB,KA2CMC,EAAsB,SAACC,GACzBJ,EAASD,EAAM/E,QAAO,SAAAqF,GAAI,OAAIA,EAAKxF,KAAOuF,OAExCE,EAAyB,SAAClC,EAAGgC,GAC/BJ,GACI,kBACID,EAAMpF,KAAI,SAAA0F,GAIN,OAHIA,EAAKxF,KAAOuF,IACZC,EAAKzC,OAASQ,EAAEiB,OAAOnB,SAEpBmC,SAavBE,qBAAU,YATa,SAAC1F,GAEpB,IAAI2F,EADO,OAAP3F,IAEJa,EAAM+E,SAAQ,SAAC7F,EAAM8F,GACb9F,EAAKC,KAAOA,IAAI2F,EAAkBE,MAE1CV,EAAStE,EAAM8E,GAAiBT,OAChCD,EAASpE,EAAM8E,GAAiBX,QAIhCc,CAAe9F,KAEhB,CAACA,IAEJ,IAAM+F,EAAcb,EAAMpF,KAAI,SAAA0F,GAAI,OAC9B,cAAC,EAAD,2BAEQA,GAFR,IAGI1C,WAAYwC,EACZtC,aAAcyC,IAHTD,EAAKxF,OAMdoE,EAAKF,IAAWC,KAAK3C,KACrBwE,EAAsB5B,EAAG,CACzBU,QAAQ,EACRmB,YAAY,IAEZC,EAAwB9B,EAAG,CAC3BU,QAAQ,EACRqB,cAAc,IAEdC,EAAyBhC,EAAG,CAC5BU,QAAQ,EACRuB,cAAc,IAGdpC,EAAiBG,EAAG,CACpBC,OAAO,EACPC,YAAac,IAEjB,OACI,cAAC,EAAD,UAEI,uBACIkB,SArFW,SAAA/C,GAEnB,GADAA,EAAEkB,iBChCuB,SAAUO,GACvC,OAAIA,EAAMN,OAAS,EDgCX6B,CAAkBvB,GAClB,GAAIhF,EAAI,CACJ,IAAMwG,EAAa,CACfxB,QACAhF,KACAkF,SAEJpE,EAAS2F,YAASD,IAClBxF,EAAc,UACX,CACH,IAAM0F,EAAU,CACZ1B,QACAE,SAEJpE,EAAS6F,YAAQD,IACjBxF,GAAiB,QAElBmE,GAAmB,IAmElB9D,UAAWC,IAAOC,QAFtB,UAII,mBAAGF,UAAWC,IAAOwD,MAArB,SACI,gCACI,uBACIzD,UAAW0C,EACXvE,KAAK,OACL0B,MAAO4D,EACP1B,SA5GE,SAAAC,GACtB0B,EAAS1B,EAAEiB,OAAOpD,OAClBiE,GAAmB,IA2GCd,YAAaa,EAAkB,aC/H1B,iCDqIjB,qBAAK7D,UAAWC,IAAOY,MACvB,yBAASb,UAAWC,IAAO0D,MAA3B,SACKa,IAEL,cAAC,EAAD,CAAUnC,IAlFG,SAACgB,GACtBO,GAAS,SAAAyB,GAAI,4BAASA,GAAT,CAAehC,UAkFpB,sBAAKrD,UAAWC,IAAOqF,iBAAvB,UACK7G,EAAK,wBACF0D,QAtHK,SAAAH,GACrBA,EAAEkB,iBACF3D,EAASgG,YAAW,CAAE9G,QACtBgB,EAAc,OAoHEO,UAAW6E,EAFT,yBAIM,KACZ,wBACI1C,QAtHK,SAAAH,GACrBA,EAAEkB,iBACFzD,EAAc,MACdE,GAAiB,IAoHDK,UAAW2E,EAFf,oBAKA,wBACI3E,UAAWyE,EACXtG,KAAK,SAFT,SAGKM,EAAK,eAAiB,uBEpJzC+G,EAAcC,IAAMC,MAAK,kBAAM,gCA4BtBC,MAzBf,WACI,MAAwD5F,qBAAWlB,KAA3DW,EAAR,EAAQA,WAAYE,EAApB,EAAoBA,cAAeC,EAAnC,EAAmCA,iBAGnC,OACI,sBACIK,UAAWR,GAAcE,EAAgBO,IAAO2F,gBAAkB3F,IAAOqB,QAD7E,UAEI,oBACItB,UAAWC,IAAOG,OADtB,mBAIA,cAAC,WAAD,CAAUyF,SAAU,6CAApB,SACI,cAACL,EAAD,MAEJ,wBACIM,SAAUtG,GAAcE,EACxBM,UAAWC,IAAOsD,OAClBpB,QAAS,kBAAMxC,GAAiB,IAHpC,0BAICH,GAAc,cAAC,EAAD,CAAUf,GAAIe,IAC5BE,GAAiB,cAAC,EAAD,Q,MCAfqG,MAlBf,WAEE,OACE,8BAEE,eAAC,IAAD,CAAQC,SAAUC,SAAlB,UACE,cAAC,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOtF,OAAK,EAACuF,KAAK,IAAIC,UAAWvF,IACjC,cAAC,IAAD,CAAOsF,KAAK,QAAQC,UAAWR,IAE/B,cAAC,IAAD,CAAOS,OAAQ,kBAAM,mECRhBC,MARf,WACI,OACI,cAACtH,EAAA,EAAD,UACI,cAAC,EAAD,OCAZiC,IAASoF,OACP,cAAC,IAAME,WAAP,UACE,cAAC,EAAD,MAEFnF,SAASC,eAAe,U,kBCT1BtD,EAAOC,QAAU,CAAC,QAAU,wBAAwB,OAAS,uBAAuB,KAAO,qBAAqB,KAAO,qBAAqB,KAAO,qBAAqB,aAAe,6BAA6B,KAAO,uB,+BCA3N,wNAGaK,EAAW,UACXE,EAAY,WACZK,EAAc,aAEd4H,EAAiB,WAE1B,OADa,IAAIC,MAAOC,kBAIfrB,EAAU,SAAC,GAAD,IAAGzB,EAAH,EAAGA,MAAOF,EAAV,EAAUA,MAAV,MAAuB,CAC1CtF,KAAMC,EACNC,QAAS,CACLI,GAAI6E,cACJG,QACAE,QACAjF,QAAS6H,IACTG,QAASH,OAGJhB,EAAa,SAAC,GAAD,IAAG9G,EAAH,EAAGA,GAAH,MAAa,CACnCN,KAAMQ,EACNN,QAAS,CACLI,QAGKyG,EAAW,SAAC,GAAD,IAAGzG,EAAH,EAAGA,GAAIkF,EAAP,EAAOA,MAAOF,EAAd,EAAcA,MAAd,MAA2B,CAC/CtF,KAAMG,EACND,QAAS,CACLoF,QACAE,QACAlF,KACAiI,QAASH,S","file":"static/js/main.c4e42b94.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Task_item__PY3ZA\",\"itemContainer\":\"Task_itemContainer__2aUhT\",\"itemTxt\":\"Task_itemTxt__2Sj_N\",\"status\":\"Task_status__umt0E\",\"deleteTask\":\"Task_deleteTask__3N8yN\",\"statusDone\":\"Task_statusDone__CrpQM\",\"bar\":\"Task_bar__4ykMG\"};","import { ADD_LIST, EDIT_LIST, REMOVE_LIST } from \"./ListsActions\"\r\n\r\nexport const listsReducers = (state, action) => {\r\n\r\n    switch (action.type) {\r\n        case ADD_LIST:\r\n            return [...state, action.payload];\r\n        case EDIT_LIST:\r\n            return state.map(list => {\r\n                if (list.id === action.payload.id) {\r\n\r\n                    return {\r\n                        ...action.payload,\r\n                        created: list.created\r\n                    }\r\n                }\r\n                else\r\n                    return list\r\n            });\r\n        case REMOVE_LIST:\r\n            return state.filter(list => list.id !== action.payload.id);\r\n        default:\r\n            return state;\r\n    }\r\n}","import { getCurrentDate } from './ListsActions'\r\nimport React, { createContext, useReducer, useState } from 'react'\r\nimport { listsReducers } from './ListsReducers'\r\n//import data from axios library\r\nexport const StoreContext = createContext(null)\r\n\r\nfunction StoreProvider({ children }) {\r\n    const [user, setUser] = useState({\r\n        name: '',\r\n    })\r\n    const [lists, dispatch] = useReducer(listsReducers, [\r\n        /*         {\r\n                    title: '',\r\n                    id: null,\r\n                    tasks: [\r\n                        { id: null, content: \"\", isDone: false },\r\n                    ],\r\n                    created: getCurrentDate(),\r\n                    updated: getCurrentDate(),\r\n                }, */\r\n    ])\r\n    const [openedList, setOpenedList] = useState(null)\r\n    const [createNewList, setCreateNewList] = useState(false)\r\n\r\n    return (\r\n        <StoreContext.Provider value={{\r\n            user,\r\n            setUser,\r\n            lists,\r\n            dispatch,\r\n            openedList,\r\n            setOpenedList,\r\n            createNewList,\r\n            setCreateNewList\r\n        }} >\r\n            {children}\r\n        </ StoreContext.Provider>\r\n    )\r\n}\r\n\r\nexport default StoreProvider\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Homepage_wrapper__1vjEw\",\"link\":\"Homepage_link__3s0nu\",\"header\":\"Homepage_header__1nO8a\",\"bar\":\"Homepage_bar__2uRVZ\",\"motivation\":\"Homepage_motivation__2jgaH\",\"logo\":\"Homepage_logo__2UBTD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"ListForm_input__A21Lm\",\"inputError\":\"ListForm_inputError__23yQT\",\"button\":\"ListForm_button__1uupW\",\"buttonSave\":\"ListForm_buttonSave__1KXUs\",\"buttonCancel\":\"ListForm_buttonCancel__1V9jR\",\"buttonDelete\":\"ListForm_buttonDelete__35jDS\",\"wrapper\":\"ListForm_wrapper__1znf2\",\"buttonsContainer\":\"ListForm_buttonsContainer__3XoAp\",\"bar\":\"ListForm_bar__1a2uq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"ToDo_content__2KaNn\",\"contentDeactive\":\"ToDo_contentDeactive__2qk6C\",\"header\":\"ToDo_header__3sYcX\",\"button\":\"ToDo_button__25EyP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"TaskForm_wrapper__3Ug1z\",\"input\":\"TaskForm_input__1kF6h\",\"inputError\":\"TaskForm_inputError__3QFWl\",\"button\":\"TaskForm_button__ihUhI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"Portal_modal__12olI\",\"modalDeactive\":\"Portal_modalDeactive__Lg_B0\"};","import React, { useContext } from 'react'\r\nimport { NavLink } from 'react-router-dom';\r\nimport { StoreContext } from \"../../store/StoreProvider\";\r\nimport styles from './Header.module.scss'\r\n\r\nfunction Header() {\r\n    const { user } = useContext(StoreContext)\r\n    return (\r\n        <header className={styles.wrapper}>\r\n            <h1 className={styles.logo}>My own</h1>\r\n            <div className={styles.header}>\r\n                <nav className={styles.nav}>\r\n                    <ul>\r\n                        <li className={styles.item}>\r\n                            <NavLink\r\n                                to=\"/\"\r\n                                className={styles.link}\r\n                                activeClassName={styles.linkIsActive}\r\n                                exact\r\n                            >Homepage</NavLink>\r\n                        </li>\r\n                        <li className={styles.item}>\r\n                            <NavLink\r\n                                to=\"/todo\"\r\n                                className={styles.link}\r\n                                activeClassName={styles.linkIsActive}\r\n                                exact\r\n                            >ToDo's</NavLink>\r\n                        </li>\r\n                        {/*       <li className={styles.item}>\r\n                        <NavLink\r\n                            to=\"/timer\"\r\n                            className={styles.link}\r\n                            activeClassName={styles.linkIsActive}\r\n                            exact\r\n                        >Pomodoro</NavLink>\r\n                    </li> */}\r\n                    </ul>\r\n                </nav>\r\n                <p className={styles.user}>Welcome {user.name} ! </p>\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport styles from './Homepage.module.scss'\r\nfunction Homepage() {\r\n    return (\r\n        <>\r\n            <section className={styles.wrapper}>\r\n                <h2 className={styles.header}>Welcome to <b className={styles.logo}>my own!</b></h2>\r\n                <article>\r\n                    I have created this web to help you achieve your goals.\r\n                    <br />\r\n                    In the &nbsp;<i><Link to=\"/todo\" className={styles.link}>ToDo's</Link></i>\r\n                    &nbsp; tab you can set your goals to simple tasks.</article>\r\n                <hr className={styles.bar} />\r\n                <article className={styles.motivation}>\r\n                    <i> Goals big and small can be the stepping-stones to a happier life. </i>\r\n                </article>\r\n            </section>\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Homepage\r\n","import React from 'react'\r\nimport ReactDOM from \"react-dom\";\r\nimport { Redirect } from 'react-router';\r\nimport styles from './Portal.module.scss'\r\n\r\n\r\nfunction Portal({ children }) {\r\n    return ReactDOM.createPortal(\r\n        <div className={styles.modal}>\r\n            {children}\r\n        </div>,\r\n        document.getElementById('root-modal')\r\n    )\r\n}\r\n\r\nexport default Portal\r\n","import React, { useEffect } from 'react'\r\nimport styles from './Task.module.scss'\r\nfunction Task({ content, id, deleteTask, isDone, changeStatus }) {\r\n\r\n    const statusBtnClass =\r\n        `${!isDone ? styles.status : `${styles.status} ${styles.statusDone}`\r\n        }`\r\n    return (\r\n        <article className={styles.item}>\r\n            <label htmlFor=\"status\">\r\n                <input\r\n                    id=\"status\"\r\n                    type=\"checkbox\"\r\n                    checked={isDone}\r\n                    onChange={(e) => changeStatus(e, id)}\r\n                    className={statusBtnClass}\r\n                />\r\n            </label>\r\n            {/*        <button\r\n                className={statusBtnClass}\r\n                onClick={() => changeStatus(id)}\r\n                type=\"button\"\r\n            >\r\n            </button> */}\r\n            <div className={styles.itemContainer}>\r\n                <p\r\n                    className={styles.itemTxt}\r\n                >{content}</p>\r\n                <div className={styles.bar}></div>\r\n            </div>\r\n            <button\r\n                type=\"button\"\r\n                className={styles.deleteTask}\r\n                onClick={() => deleteTask(id)}>\r\n            </button>\r\n        </article>\r\n    )\r\n}\r\n\r\nexport default Task\r\n","import React, { useState } from 'react'\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { taskValidationFn, taskErrorMessage } from './Validation';\r\nimport styles from './TaskForm.module.scss'\r\nimport classNames from 'classnames/bind';\r\n\r\nfunction TaskForm({ content = \"\", add }) {\r\n    const [taskInput, setTaskInput] = useState(content)\r\n    const [taskValidation, setTaskValidation] = useState(true)\r\n\r\n    const handleChange = e => {\r\n        setTaskValidation(true)\r\n        setTaskInput(e.target.value)\r\n    }\r\n\r\n    const handleAddTask = e => {\r\n        e.preventDefault();\r\n        if (taskValidationFn(taskInput)) {\r\n            const newTask = {\r\n                content: taskInput,\r\n                id: uuidv4(),\r\n                isDone: false,\r\n            }\r\n            add(newTask)\r\n            setTaskInput(\"\")\r\n        } else {\r\n            setTaskValidation(false)\r\n        }\r\n    }\r\n\r\n    let cx = classNames.bind(styles);\r\n    let classNameInput = cx({\r\n        input: true,\r\n        inputError: !taskValidation,\r\n    });\r\n    return (\r\n        <>\r\n            <article className={styles.wrapper}>\r\n                <label >\r\n                    <input\r\n                        placeholder={taskValidation ? \"new task...\" : taskErrorMessage}\r\n                        type=\"text\"\r\n                        className={classNameInput}\r\n                        value={taskInput}\r\n                        onChange={handleChange}\r\n                    />\r\n                </label>\r\n                <button\r\n                    onClick={handleAddTask}\r\n                    className={styles.button}\r\n                >\r\n                    Add task</button>\r\n            </article>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TaskForm\r\n","export const taskErrorMessage = \"! Task cannot be empty.\"\r\nexport const taskValidationFn = function (content) {\r\n    if (content.length > 0) return true\r\n    else return false\r\n}","import React, { useContext, useEffect, useState } from 'react'\r\nimport { StoreContext } from '../../../store/StoreProvider'\r\nimport { addList, editList, removeList } from '../../../store/ListsActions'\r\nimport { titleValidationFn, titleErrorMessage } from './Validation'\r\n\r\nimport Portal from '../../Portal/Portal'\r\nimport Task from '../Task/Task'\r\nimport TaskForm from '../TaskForm/TaskForm'\r\nimport styles from './ListForm.module.scss'\r\nimport classNames from 'classnames/bind';\r\n\r\nfunction ListForm({ id = null, }) {\r\n    const { lists, dispatch, setOpenedList, setCreateNewList } = useContext(StoreContext)\r\n    const [title, setTitle] = useState('')\r\n    const [tasks, setTasks] = useState([])\r\n    const [titleValidation, setTitleValidation] = useState(true)\r\n\r\n\r\n    const handleTitleChange = e => {\r\n        setTitle(e.target.value)\r\n        setTitleValidation(true)\r\n    }\r\n    const handleDeleteNote = e => {\r\n        e.preventDefault()\r\n        dispatch(removeList({ id }))\r\n        setOpenedList(null)\r\n    }\r\n    const handleCancelNote = e => {\r\n        e.preventDefault()\r\n        setOpenedList(null)\r\n        setCreateNewList(false)\r\n    }\r\n    const handleSaveNote = e => {\r\n        e.preventDefault()\r\n        if (titleValidationFn(title)) {\r\n            if (id) {\r\n                const editedList = {\r\n                    title,\r\n                    id,\r\n                    tasks,\r\n                }\r\n                dispatch(editList(editedList))\r\n                setOpenedList(null)\r\n            } else {\r\n                const newList = {\r\n                    title,\r\n                    tasks\r\n                }\r\n                dispatch(addList(newList))\r\n                setCreateNewList(false)\r\n            }\r\n        } else setTitleValidation(false)\r\n    }\r\n\r\n\r\n    const handleAddNewTask = (newTask) => {\r\n        setTasks(prev => ([...prev, newTask]))\r\n    }\r\n    const handleRemoveOneTask = (taskId) => {\r\n        setTasks(tasks.filter(task => task.id !== taskId))\r\n    }\r\n    const handlechangeTaskStatus = (e, taskId) => {\r\n        setTasks(\r\n            () => (\r\n                tasks.map(task => {\r\n                    if (task.id === taskId) {\r\n                        task.isDone = e.target.checked\r\n                    }\r\n                    return task\r\n                })\r\n            ))\r\n    }\r\n    const findEditedList = (id) => {\r\n        if (id === null) return\r\n        let editedListIndex\r\n        lists.forEach((list, index) => {\r\n            if (list.id === id) editedListIndex = index\r\n        })\r\n        setTasks(lists[editedListIndex].tasks)\r\n        setTitle(lists[editedListIndex].title)\r\n    }\r\n    useEffect(() => {\r\n\r\n        findEditedList(id)\r\n        //dodaj clean up function\r\n    }, [id])\r\n\r\n    const renderTasks = tasks.map(task => (\r\n        <Task\r\n            key={task.id}\r\n            {...task}\r\n            deleteTask={handleRemoveOneTask}\r\n            changeStatus={handlechangeTaskStatus} />\r\n    ))\r\n\r\n    let cx = classNames.bind(styles);\r\n    let classNameSaveButton = cx({\r\n        button: true,\r\n        buttonSave: true\r\n    });\r\n    let classNameCancelButton = cx({\r\n        button: true,\r\n        buttonCancel: true\r\n    });\r\n    let classNameDeletelButton = cx({\r\n        button: true,\r\n        buttonDelete: true\r\n    });\r\n\r\n    let classNameInput = cx({\r\n        input: true,\r\n        inputError: !titleValidation,\r\n    });\r\n    return (\r\n        <Portal>\r\n\r\n            <form\r\n                onSubmit={handleSaveNote}\r\n                className={styles.wrapper}\r\n            >\r\n                <p className={styles.title}>\r\n                    <label>\r\n                        <input\r\n                            className={classNameInput}\r\n                            type=\"text\"\r\n                            value={title}\r\n                            onChange={handleTitleChange}\r\n                            placeholder={titleValidation ? \"title note\" :\r\n                                titleErrorMessage}\r\n\r\n                        />\r\n                    </label>\r\n                </p>\r\n                <div className={styles.bar}></div>\r\n                <section className={styles.tasks}>\r\n                    {renderTasks}\r\n                </section>\r\n                <TaskForm add={handleAddNewTask} />\r\n                <div className={styles.buttonsContainer}>\r\n                    {id ? <button\r\n                        onClick={handleDeleteNote}\r\n                        className={classNameDeletelButton}>\r\n                        Delete List\r\n                    </button> : null}\r\n                    <button\r\n                        onClick={handleCancelNote}\r\n                        className={classNameCancelButton}>\r\n                        Cancel\r\n                    </button>\r\n                    <button\r\n                        className={classNameSaveButton}\r\n                        type=\"submit\">\r\n                        {id ? \"Save changes\" : \"Save list\"}\r\n                    </button>\r\n                </div>\r\n            </form>\r\n        </Portal>\r\n    )\r\n}\r\n\r\nexport default ListForm\r\n","export const titleErrorMessage = \"! Title cannot be empty.\"\r\nexport const titleValidationFn = function (title) {\r\n    if (title.length > 0) return true\r\n    else return false\r\n}","import styles from './ToDo.module.scss'\r\nimport React, { useContext, Suspense } from 'react'\r\nimport ListForm from '../../components/ToDo/ListForm/ListForm'\r\nimport { StoreContext } from '../../store/StoreProvider'\r\nconst ListWrapper = React.lazy(() => import('../../components/ToDo/ListWrapper/ListWrapper'))\r\n\r\n\r\nfunction ToDo() {\r\n    const { openedList, createNewList, setCreateNewList } = useContext(StoreContext)\r\n    // zastap to biblioteka classname\r\n\r\n    return (\r\n        <div\r\n            className={openedList || createNewList ? styles.contentDeactive : styles.content}>\r\n            <h2\r\n                className={styles.header}\r\n            >To Do</h2>\r\n\r\n            <Suspense fallback={<div>...loading</div>}>\r\n                <ListWrapper />\r\n            </Suspense>\r\n            <button\r\n                disabled={openedList || createNewList}\r\n                className={styles.button}\r\n                onClick={() => setCreateNewList(true)}>Add new note</button>\r\n            {openedList && <ListForm id={openedList} />}\r\n            {createNewList && <ListForm />}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDo\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport Header from './components/Header/Header'\r\nimport Homepage from './views/Homepage/Homepage';\r\nimport ToDo from './views/ToDo/ToDo';\r\nimport Pomodoro from './views/Pomodoro/Pomodoro';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div>\r\n\r\n      <Router basename={process.env.PUBLIC_URL}>\r\n        <Header />\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Homepage} />\r\n          <Route path=\"/todo\" component={ToDo} />\r\n          {/*  <Route path=\"/timer\" component={Pomodoro} /> */}\r\n          <Route render={() => <div>something went wrong</div>} />\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react'\r\nimport App from './App'\r\nimport StoreProvider from './store/StoreProvider'\r\nfunction Root() {\r\n    return (\r\n        <StoreProvider>\r\n            <App />\r\n        </StoreProvider>\r\n    )\r\n}\r\n\r\nexport default Root\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport Root from './Root'\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Root />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Header_wrapper__20gSH\",\"header\":\"Header_header__2C48s\",\"logo\":\"Header_logo__3UUbs\",\"item\":\"Header_item__2-qWz\",\"link\":\"Header_link__3xZMW\",\"linkIsActive\":\"Header_linkIsActive__yGJk8\",\"user\":\"Header_user__2fC_s\"};","\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n\r\nexport const ADD_LIST = 'addList'\r\nexport const EDIT_LIST = 'editList'\r\nexport const REMOVE_LIST = 'removeList'\r\n\r\nexport const getCurrentDate = () => {\r\n    const time = new Date().toLocaleString()\r\n    return time\r\n}\r\n\r\nexport const addList = ({ tasks, title }) => ({\r\n    type: ADD_LIST,\r\n    payload: {\r\n        id: uuidv4(),\r\n        title,\r\n        tasks,\r\n        created: getCurrentDate(),\r\n        updated: getCurrentDate(),\r\n    }\r\n})\r\nexport const removeList = ({ id }) => ({\r\n    type: REMOVE_LIST,\r\n    payload: {\r\n        id\r\n    }\r\n})\r\nexport const editList = ({ id, tasks, title }) => ({\r\n    type: EDIT_LIST,\r\n    payload: {\r\n        title,\r\n        tasks,\r\n        id,\r\n        updated: getCurrentDate(),\r\n    }\r\n})"],"sourceRoot":""}